{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c7c56332-ed4c-437c-9052-4edfa7892953",
   "metadata": {},
   "outputs": [],
   "source": [
    "import streamlit as st\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "\n",
    "from sklearn.model_selection import train_test_split, cross_val_score\n",
    "from sklearn.ensemble import RandomForestRegressor, RandomForestClassifier\n",
    "from sklearn.metrics import mean_absolute_error, r2_score, classification_report\n",
    "\n",
    "# ---------------------------------\n",
    "# App Config\n",
    "# ---------------------------------\n",
    "st.set_page_config(page_title=\"Airbnb Analytics\", layout=\"wide\")\n",
    "sns.set_style(\"darkgrid\")\n",
    "plt.style.use(\"dark_background\")\n",
    "\n",
    "# ---------------------------------\n",
    "# Load Data\n",
    "# ---------------------------------\n",
    "@st.cache_data\n",
    "def load_data():\n",
    "    return pd.read_csv(\"Airbnb_Cleaned_Ready.csv.gz\", low_memory=False)\n",
    "\n",
    "df = load_data()\n",
    "st.title(\"üè† Airbnb Portfolio Dashboard\")\n",
    "\n",
    "st.markdown(\"Explore Airbnb data, visualize trends, and test ML models for **price prediction** and **demand classification**.\")\n",
    "\n",
    "# ---------------------------------\n",
    "# Sidebar Filters\n",
    "# ---------------------------------\n",
    "st.sidebar.header(\"üîé Filters\")\n",
    "if \"neighbourhood group\" in df.columns:\n",
    "    ng_filter = st.sidebar.multiselect(\"Neighbourhood Group\", df[\"neighbourhood group\"].unique())\n",
    "    if ng_filter:\n",
    "        df = df[df[\"neighbourhood group\"].isin(ng_filter)]\n",
    "\n",
    "if \"room type\" in df.columns:\n",
    "    rt_filter = st.sidebar.multiselect(\"Room Type\", df[\"room type\"].unique())\n",
    "    if rt_filter:\n",
    "        df = df[df[\"room type\"].isin(rt_filter)]\n",
    "\n",
    "st.sidebar.write(\"Dataset size:\", df.shape)\n",
    "\n",
    "# ---------------------------------\n",
    "# EDA Tabs\n",
    "# ---------------------------------\n",
    "tab1, tab2, tab3, tab4 = st.tabs([\"üìä Price Distribution\", \"üèò Room Types\", \"üåç Map & Correlation\", \"üìà Reviews Over Time\"])\n",
    "\n",
    "with tab1:\n",
    "    if \"price\" in df.columns:\n",
    "        fig, ax = plt.subplots(figsize=(10,6))\n",
    "        sns.histplot(df[\"price\"].dropna(), bins=50, kde=True, ax=ax, color=\"cyan\")\n",
    "        ax.set_title(\"Distribution of Listing Prices\")\n",
    "        st.pyplot(fig)\n",
    "\n",
    "        fig, ax = plt.subplots(figsize=(10,4))\n",
    "        sns.boxplot(x=df[\"price\"], ax=ax, color=\"purple\")\n",
    "        ax.set_title(\"Price Outliers\")\n",
    "        st.pyplot(fig)\n",
    "\n",
    "with tab2:\n",
    "    if \"room type\" in df.columns:\n",
    "        fig, ax = plt.subplots(figsize=(8,5))\n",
    "        sns.countplot(data=df, x=\"room type\", ax=ax, palette=\"viridis\")\n",
    "        ax.set_title(\"Room Type Distribution\")\n",
    "        st.pyplot(fig)\n",
    "\n",
    "with tab3:\n",
    "    if \"neighbourhood group\" in df.columns:\n",
    "        fig, ax = plt.subplots(figsize=(10,6))\n",
    "        order = df[\"neighbourhood group\"].value_counts().index\n",
    "        sns.countplot(data=df, y=\"neighbourhood group\", order=order, ax=ax, palette=\"magma\")\n",
    "        ax.set_title(\"Listings by Neighbourhood Group\")\n",
    "        st.pyplot(fig)\n",
    "\n",
    "    corr = df.select_dtypes(include=[np.number]).corr()\n",
    "    fig, ax = plt.subplots(figsize=(12,8))\n",
    "    sns.heatmap(corr, cmap=\"coolwarm\", center=0, ax=ax)\n",
    "    ax.set_title(\"Correlation Heatmap\")\n",
    "    st.pyplot(fig)\n",
    "\n",
    "with tab4:\n",
    "    if \"last review\" in df.columns:\n",
    "        reviews_over_time = df.dropna(subset=[\"last review\"]).groupby(df[\"last review\"].astype(\"datetime64[M]\")).size()\n",
    "        fig, ax = plt.subplots(figsize=(12,5))\n",
    "        reviews_over_time.plot(kind=\"line\", ax=ax, color=\"lime\")\n",
    "        ax.set_title(\"Number of Reviews Over Time\")\n",
    "        st.pyplot(fig)\n",
    "\n",
    "# ---------------------------------\n",
    "# Machine Learning Section\n",
    "# ---------------------------------\n",
    "st.header(\"ü§ñ Machine Learning Models\")\n",
    "\n",
    "ml_choice = st.radio(\"Select a model to run:\", [\"üí≤ Price Prediction\", \"üìà Demand Classification\"])\n",
    "\n",
    "# --- Price Prediction ---\n",
    "if ml_choice == \"üí≤ Price Prediction\" and \"price\" in df.columns:\n",
    "    df_ml = df.copy()\n",
    "    cat_cols = [c for c in [\"room type\", \"neighbourhood group\"] if c in df_ml.columns]\n",
    "    df_ml = pd.get_dummies(df_ml, columns=cat_cols, drop_first=True)\n",
    "    df_ml.columns = [c.lower().strip() for c in df_ml.columns]\n",
    "\n",
    "    leakage_cols = [c for c in df_ml.columns if \"price\" in c or \"review\" in c or \"avail\" in c or \"demand\" in c]\n",
    "    X = df_ml.drop(columns=leakage_cols, errors=\"ignore\").select_dtypes(include=[np.number]).fillna(0)\n",
    "    y = np.log1p(df_ml[\"price\"])\n",
    "\n",
    "    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n",
    "    reg = RandomForestRegressor(n_estimators=200, random_state=42, n_jobs=-1)\n",
    "    reg.fit(X_train, y_train)\n",
    "\n",
    "    y_pred = reg.predict(X_test)\n",
    "    y_test_orig, y_pred_orig = np.expm1(y_test), np.expm1(y_pred)\n",
    "\n",
    "    st.subheader(\"üìä Price Prediction Results\")\n",
    "    st.write(\"MAE:\", round(mean_absolute_error(y_test_orig, y_pred_orig), 2))\n",
    "    st.write(\"R¬≤:\", round(r2_score(y_test_orig, y_pred_orig), 3))\n",
    "\n",
    "    fig, ax = plt.subplots(figsize=(10,4))\n",
    "    pd.Series(reg.feature_importances_, index=X.columns).sort_values(ascending=False).head(10).plot(kind=\"bar\", ax=ax, color=\"orange\")\n",
    "    ax.set_title(\"Top Features Driving Price\")\n",
    "    st.pyplot(fig)\n",
    "\n",
    "# --- Demand Classification ---\n",
    "if ml_choice == \"üìà Demand Classification\" and \"demand\" in df.columns:\n",
    "    safe_cols = [\"lat\", \"long\", \"neighbourhood group\", \"room type\", \"minimum nights\"]\n",
    "    df_clf = df[safe_cols + [\"demand\"]].dropna()\n",
    "    df_clf = pd.get_dummies(df_clf, columns=[\"neighbourhood group\", \"room type\"], drop_first=True)\n",
    "\n",
    "    X = df_clf.drop(columns=[\"demand\"])\n",
    "    y = df_clf[\"demand\"]\n",
    "\n",
    "    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n",
    "    clf = RandomForestClassifier(n_estimators=200, random_state=42, class_weight=\"balanced\", n_jobs=-1)\n",
    "    clf.fit(X_train, y_train)\n",
    "    y_pred = clf.predict(X_test)\n",
    "\n",
    "    st.subheader(\"üìä Demand Classification Results\")\n",
    "    scores = cross_val_score(clf, X, y, cv=5, scoring=\"accuracy\", n_jobs=-1)\n",
    "    st.write(\"Cross-validated Accuracy:\", round(scores.mean(), 3))\n",
    "    st.text(classification_report(y_test, y_pred))\n",
    "\n",
    "    fig, ax = plt.subplots(figsize=(10,4))\n",
    "    pd.Series(clf.feature_importances_, index=X.columns).sort_values(ascending=False).head(10).plot(kind=\"bar\", ax=ax, color=\"cyan\")\n",
    "    ax.set_title(\"Top Features Driving Demand\")\n",
    "    st.pyplot(fig)\n",
    "\n",
    "st.success(\"‚úÖ App Ready! Use the sidebar to filter data and explore insights.\")\n",
    "# ---------------------------------\n",
    "# Interactive Prediction\n",
    "# ---------------------------------\n",
    "st.header(\"üéØ Try It Yourself: Predict Price & Demand\")\n",
    "\n",
    "with st.form(\"predict_form\"):\n",
    "    lat = st.number_input(\"Latitude\", value=float(df[\"lat\"].median()))\n",
    "    lon = st.number_input(\"Longitude\", value=float(df[\"long\"].median()))\n",
    "    nights = st.number_input(\"Minimum Nights\", min_value=1, max_value=365, value=3)\n",
    "    room_type = st.selectbox(\"Room Type\", df[\"room type\"].unique())\n",
    "    neigh_group = st.selectbox(\"Neighbourhood Group\", df[\"neighbourhood group\"].unique())\n",
    "    submitted = st.form_submit_button(\"Predict\")\n",
    "\n",
    "if submitted:\n",
    "    # Prepare single row\n",
    "    input_df = pd.DataFrame({\n",
    "        \"lat\": [lat],\n",
    "        \"long\": [lon],\n",
    "        \"minimum nights\": [nights],\n",
    "        \"room type\": [room_type],\n",
    "        \"neighbourhood group\": [neigh_group]\n",
    "    })\n",
    "\n",
    "    # Encode like training\n",
    "    input_df = pd.get_dummies(input_df, columns=[\"room type\",\"neighbourhood group\"], drop_first=True)\n",
    "    for col in X.columns:  # X from your training above\n",
    "        if col not in input_df:\n",
    "            input_df[col] = 0\n",
    "    input_df = input_df[X.columns]\n",
    "\n",
    "    # Demand prediction\n",
    "    demand_pred = clf.predict(input_df)[0]\n",
    "    demand_label = \"High Demand\" if demand_pred == 1 else \"Low Demand\"\n",
    "\n",
    "    # Price prediction\n",
    "    # reuse regression model (reg) trained above\n",
    "    price_pred_log = reg.predict(input_df)[0]\n",
    "    price_pred = np.expm1(price_pred_log)\n",
    "\n",
    "    st.subheader(\"üìå Predictions\")\n",
    "    st.write(f\"üí≤ Estimated Price: **${price_pred:,.0f}**\")\n",
    "    st.write(f\"üî• Demand Level: **{demand_label}**\")\n",
    "\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.13.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
